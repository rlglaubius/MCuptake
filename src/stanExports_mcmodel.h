// Generated by rstantools.  Do not edit by hand.

/*
    MCuptake is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MCuptake is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MCuptake.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mcmodel_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 97> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 16, column 2 to column 26)",
  " (in 'string', line 17, column 2 to column 26)",
  " (in 'string', line 18, column 2 to column 26)",
  " (in 'string', line 19, column 2 to column 26)",
  " (in 'string', line 20, column 2 to column 26)",
  " (in 'string', line 22, column 2 to column 24)",
  " (in 'string', line 23, column 2 to column 33)",
  " (in 'string', line 24, column 2 to column 24)",
  " (in 'string', line 26, column 2 to column 24)",
  " (in 'string', line 27, column 2 to column 33)",
  " (in 'string', line 30, column 2 to column 10)",
  " (in 'string', line 31, column 2 to column 10)",
  " (in 'string', line 32, column 2 to column 33)",
  " (in 'string', line 33, column 2 to column 33)",
  " (in 'string', line 34, column 2 to column 33)",
  " (in 'string', line 35, column 2 to column 33)",
  " (in 'string', line 36, column 2 to column 58)",
  " (in 'string', line 37, column 2 to column 53)",
  " (in 'string', line 38, column 2 to column 48)",
  " (in 'string', line 39, column 2 to column 22)",
  " (in 'string', line 40, column 2 to column 22)",
  " (in 'string', line 43, column 4 to column 74)",
  " (in 'string', line 44, column 4 to column 74)",
  " (in 'string', line 45, column 4 to column 53)",
  " (in 'string', line 46, column 4 to column 23)",
  " (in 'string', line 42, column 25 to line 47, column 3)",
  " (in 'string', line 42, column 2 to line 47, column 3)",
  " (in 'string', line 50, column 4 to column 64)",
  " (in 'string', line 51, column 4 to column 64)",
  " (in 'string', line 49, column 25 to line 52, column 3)",
  " (in 'string', line 49, column 2 to line 52, column 3)",
  " (in 'string', line 55, column 6 to column 79)",
  " (in 'string', line 54, column 27 to line 56, column 5)",
  " (in 'string', line 54, column 4 to line 56, column 5)",
  " (in 'string', line 53, column 25 to line 57, column 3)",
  " (in 'string', line 53, column 2 to line 57, column 3)",
  " (in 'string', line 60, column 4 to column 36)",
  " (in 'string', line 59, column 25 to line 61, column 3)",
  " (in 'string', line 59, column 2 to line 61, column 3)",
  " (in 'string', line 64, column 4 to column 78)",
  " (in 'string', line 63, column 25 to line 65, column 3)",
  " (in 'string', line 63, column 2 to line 65, column 3)",
  " (in 'string', line 69, column 6 to column 84)",
  " (in 'string', line 68, column 27 to line 70, column 5)",
  " (in 'string', line 68, column 4 to line 70, column 5)",
  " (in 'string', line 67, column 25 to line 71, column 3)",
  " (in 'string', line 67, column 2 to line 71, column 3)",
  " (in 'string', line 74, column 4 to column 16)",
  " (in 'string', line 75, column 4 to column 16)",
  " (in 'string', line 77, column 6 to column 81)",
  " (in 'string', line 78, column 6 to column 47)",
  " (in 'string', line 76, column 45 to line 79, column 5)",
  " (in 'string', line 76, column 4 to line 79, column 5)",
  " (in 'string', line 80, column 4 to column 35)",
  " (in 'string', line 73, column 25 to line 81, column 3)",
  " (in 'string', line 73, column 2 to line 81, column 3)",
  " (in 'string', line 85, column 2 to column 31)",
  " (in 'string', line 86, column 2 to column 31)",
  " (in 'string', line 87, column 2 to column 37)",
  " (in 'string', line 88, column 2 to column 31)",
  " (in 'string', line 89, column 2 to column 31)",
  " (in 'string', line 90, column 2 to column 29)",
  " (in 'string', line 91, column 2 to column 27)",
  " (in 'string', line 92, column 2 to column 29)",
  " (in 'string', line 93, column 2 to column 29)",
  " (in 'string', line 94, column 2 to column 27)",
  " (in 'string', line 97, column 4 to column 90)",
  " (in 'string', line 96, column 25 to line 98, column 3)",
  " (in 'string', line 96, column 2 to line 98, column 3)",
  " (in 'string', line 2, column 2 to column 16)",
  " (in 'string', line 3, column 2 to column 16)",
  " (in 'string', line 4, column 25 to column 34)",
  " (in 'string', line 4, column 2 to column 36)",
  " (in 'string', line 5, column 24 to column 33)",
  " (in 'string', line 5, column 35 to column 44)",
  " (in 'string', line 5, column 2 to column 46)",
  " (in 'string', line 6, column 2 to column 16)",
  " (in 'string', line 7, column 27 to column 36)",
  " (in 'string', line 7, column 2 to column 38)",
  " (in 'string', line 8, column 27 to column 36)",
  " (in 'string', line 8, column 2 to column 38)",
  " (in 'string', line 9, column 24 to column 33)",
  " (in 'string', line 9, column 2 to column 35)",
  " (in 'string', line 10, column 25 to column 34)",
  " (in 'string', line 10, column 2 to column 36)",
  " (in 'string', line 11, column 25 to column 34)",
  " (in 'string', line 11, column 2 to column 36)",
  " (in 'string', line 32, column 22 to column 31)",
  " (in 'string', line 33, column 22 to column 31)",
  " (in 'string', line 34, column 22 to column 31)",
  " (in 'string', line 35, column 22 to column 31)",
  " (in 'string', line 36, column 36 to column 45)",
  " (in 'string', line 36, column 47 to column 56)",
  " (in 'string', line 37, column 32 to column 41)",
  " (in 'string', line 37, column 42 to column 51)",
  " (in 'string', line 38, column 37 to column 46)"};
#include <stan_meta_header.hpp>
class model_mcmodel final : public model_base_crtp<model_mcmodel> {
private:
  int n_pop_yrs;
  int n_pop_age;
  std::vector<int> pop_year;
  std::vector<std::vector<double>> pop_sum;
  int n_svy_obs;
  std::vector<int> svy_age_min;
  std::vector<int> svy_age_max;
  std::vector<int> svy_year;
  std::vector<double> svy_n_mc;
  std::vector<double> svy_n_no;
public:
  ~model_mcmodel() {}
  model_mcmodel(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mcmodel_namespace::model_mcmodel";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 70;
      context__.validate_dims("data initialization", "n_pop_yrs", "int",
        std::vector<size_t>{});
      n_pop_yrs = std::numeric_limits<int>::min();
      current_statement__ = 70;
      n_pop_yrs = context__.vals_i("n_pop_yrs")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization", "n_pop_age", "int",
        std::vector<size_t>{});
      n_pop_age = std::numeric_limits<int>::min();
      current_statement__ = 71;
      n_pop_age = context__.vals_i("n_pop_age")[(1 - 1)];
      current_statement__ = 72;
      stan::math::validate_non_negative_index("pop_year", "n_pop_yrs",
        n_pop_yrs);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "pop_year", "int",
        std::vector<size_t>{static_cast<size_t>(n_pop_yrs)});
      pop_year = std::vector<int>(n_pop_yrs, std::numeric_limits<int>::min());
      current_statement__ = 73;
      pop_year = context__.vals_i("pop_year");
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "pop_year", pop_year, 0);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("pop_sum", "n_pop_yrs",
        n_pop_yrs);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("pop_sum", "n_pop_age",
        n_pop_age);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "pop_sum", "double",
        std::vector<size_t>{static_cast<size_t>(n_pop_yrs),
          static_cast<size_t>(n_pop_age)});
      pop_sum = std::vector<std::vector<double>>(n_pop_yrs,
                  std::vector<double>(n_pop_age,
                    std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> pop_sum_flat__;
        current_statement__ = 76;
        pop_sum_flat__ = context__.vals_r("pop_sum");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
          current_statement__ = 76;
          for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
            current_statement__ = 76;
            stan::model::assign(pop_sum, pop_sum_flat__[(pos__ - 1)],
              "assigning variable pop_sum", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "pop_sum", pop_sum, 0);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "n_svy_obs", "int",
        std::vector<size_t>{});
      n_svy_obs = std::numeric_limits<int>::min();
      current_statement__ = 77;
      n_svy_obs = context__.vals_i("n_svy_obs")[(1 - 1)];
      current_statement__ = 78;
      stan::math::validate_non_negative_index("svy_age_min", "n_svy_obs",
        n_svy_obs);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "svy_age_min", "int",
        std::vector<size_t>{static_cast<size_t>(n_svy_obs)});
      svy_age_min = std::vector<int>(n_svy_obs,
                      std::numeric_limits<int>::min());
      current_statement__ = 79;
      svy_age_min = context__.vals_i("svy_age_min");
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "svy_age_min",
        svy_age_min, 0);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("svy_age_max", "n_svy_obs",
        n_svy_obs);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "svy_age_max", "int",
        std::vector<size_t>{static_cast<size_t>(n_svy_obs)});
      svy_age_max = std::vector<int>(n_svy_obs,
                      std::numeric_limits<int>::min());
      current_statement__ = 81;
      svy_age_max = context__.vals_i("svy_age_max");
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "svy_age_max",
        svy_age_max, 0);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("svy_year", "n_svy_obs",
        n_svy_obs);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "svy_year", "int",
        std::vector<size_t>{static_cast<size_t>(n_svy_obs)});
      svy_year = std::vector<int>(n_svy_obs, std::numeric_limits<int>::min());
      current_statement__ = 83;
      svy_year = context__.vals_i("svy_year");
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "svy_year", svy_year, 0);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("svy_n_mc", "n_svy_obs",
        n_svy_obs);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "svy_n_mc", "double",
        std::vector<size_t>{static_cast<size_t>(n_svy_obs)});
      svy_n_mc = std::vector<double>(n_svy_obs,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 85;
      svy_n_mc = context__.vals_r("svy_n_mc");
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "svy_n_mc", svy_n_mc, 0);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("svy_n_no", "n_svy_obs",
        n_svy_obs);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "svy_n_no", "double",
        std::vector<size_t>{static_cast<size_t>(n_svy_obs)});
      svy_n_no = std::vector<double>(n_svy_obs,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 87;
      svy_n_no = context__.vals_r("svy_n_no");
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "svy_n_no", svy_n_no, 0);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("rate1", "n_pop_yrs", n_pop_yrs);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("rate2", "n_pop_yrs", n_pop_yrs);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("dist1", "n_pop_age", n_pop_age);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("dist2", "n_pop_age", n_pop_age);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("uptake_prop", "n_pop_yrs",
        n_pop_yrs);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("uptake_prop", "n_pop_age",
        n_pop_age);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("mc_prev", "n_pop_yrs",
        n_pop_yrs);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("mc_prev", "n_pop_age",
        n_pop_age);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("svy_mc_prev", "n_svy_obs",
        n_svy_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_mcmodel";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mcmodel_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ r1_slope1 = DUMMY_VAR__;
      current_statement__ = 1;
      r1_slope1 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ r1_slope2 = DUMMY_VAR__;
      current_statement__ = 2;
      r1_slope2 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ r1_center = DUMMY_VAR__;
      current_statement__ = 3;
      r1_center = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ r1_theta1 = DUMMY_VAR__;
      current_statement__ = 4;
      r1_theta1 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ r1_theta2 = DUMMY_VAR__;
      current_statement__ = 5;
      r1_theta2 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ a1_size = DUMMY_VAR__;
      current_statement__ = 6;
      a1_size = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ a1_mean = DUMMY_VAR__;
      current_statement__ = 7;
      a1_mean = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 50, lp__);
      local_scalar_t__ r2_rate = DUMMY_VAR__;
      current_statement__ = 8;
      r2_rate = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ a2_size = DUMMY_VAR__;
      current_statement__ = 9;
      a2_size = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ a2_mean = DUMMY_VAR__;
      current_statement__ = 10;
      a2_mean = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 50, lp__);
      local_scalar_t__ z1 = DUMMY_VAR__;
      local_scalar_t__ z2 = DUMMY_VAR__;
      std::vector<local_scalar_t__> rate1 =
        std::vector<local_scalar_t__>(n_pop_yrs, DUMMY_VAR__);
      std::vector<local_scalar_t__> rate2 =
        std::vector<local_scalar_t__>(n_pop_yrs, DUMMY_VAR__);
      std::vector<local_scalar_t__> dist1 =
        std::vector<local_scalar_t__>(n_pop_age, DUMMY_VAR__);
      std::vector<local_scalar_t__> dist2 =
        std::vector<local_scalar_t__>(n_pop_age, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> uptake_prop =
        std::vector<std::vector<local_scalar_t__>>(n_pop_yrs,
          std::vector<local_scalar_t__>(n_pop_age, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> mc_prev =
        std::vector<std::vector<local_scalar_t__>>(n_pop_yrs,
          std::vector<local_scalar_t__>(n_pop_age, DUMMY_VAR__));
      std::vector<local_scalar_t__> svy_mc_prev =
        std::vector<local_scalar_t__>(n_svy_obs, DUMMY_VAR__);
      local_scalar_t__ numer = DUMMY_VAR__;
      local_scalar_t__ denom = DUMMY_VAR__;
      current_statement__ = 27;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 22;
        z1 = (1.0 / (1.0 +
          stan::math::exp((-r1_slope1 *
            ((stan::model::rvalue(pop_year, "pop_year",
                stan::model::index_uni(t)) - 1970) - r1_center)))));
        current_statement__ = 23;
        z2 = (1.0 / (1.0 +
          stan::math::exp((r1_slope2 *
            ((stan::model::rvalue(pop_year, "pop_year",
                stan::model::index_uni(t)) - 1970) - r1_center)))));
        current_statement__ = 24;
        stan::model::assign(rate1, (z1 * (((2 * r1_theta1) * z2) +
          r1_theta2)), "assigning variable rate1", stan::model::index_uni(t));
        current_statement__ = 25;
        stan::model::assign(rate2, r2_rate, "assigning variable rate2",
          stan::model::index_uni(t));
      }
      current_statement__ = 31;
      for (int a = 1; a <= n_pop_age; ++a) {
        current_statement__ = 28;
        stan::model::assign(dist1,
          stan::math::exp(
            stan::math::neg_binomial_2_lpmf<false>((a - 1), a1_mean, a1_size)),
          "assigning variable dist1", stan::model::index_uni(a));
        current_statement__ = 29;
        stan::model::assign(dist2,
          stan::math::exp(
            stan::math::neg_binomial_2_lpmf<false>((a - 1), a2_mean, a2_size)),
          "assigning variable dist2", stan::model::index_uni(a));
      }
      current_statement__ = 36;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 34;
        for (int a = 1; a <= n_pop_age; ++a) {
          current_statement__ = 32;
          stan::model::assign(uptake_prop, (1.0 -
            stan::math::exp(
              ((-stan::model::rvalue(rate1, "rate1",
                   stan::model::index_uni(t)) *
              stan::model::rvalue(dist1, "dist1", stan::model::index_uni(a)))
              -
              (stan::model::rvalue(rate2, "rate2", stan::model::index_uni(t))
              *
              stan::model::rvalue(dist2, "dist2", stan::model::index_uni(a)))))),
            "assigning variable uptake_prop", stan::model::index_uni(t),
            stan::model::index_uni(a));
        }
      }
      current_statement__ = 39;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 37;
        stan::model::assign(mc_prev,
          stan::model::rvalue(uptake_prop, "uptake_prop",
            stan::model::index_uni(t), stan::model::index_uni(1)),
          "assigning variable mc_prev", stan::model::index_uni(t),
          stan::model::index_uni(1));
      }
      current_statement__ = 42;
      for (int a = 2; a <= n_pop_age; ++a) {
        current_statement__ = 40;
        stan::model::assign(mc_prev,
          (stan::model::rvalue(mc_prev, "mc_prev", stan::model::index_uni(1),
             stan::model::index_uni((a - 1))) + ((1.0 -
          stan::model::rvalue(mc_prev, "mc_prev", stan::model::index_uni(1),
            stan::model::index_uni((a - 1)))) *
          stan::model::rvalue(uptake_prop, "uptake_prop",
            stan::model::index_uni(1), stan::model::index_uni(a)))),
          "assigning variable mc_prev", stan::model::index_uni(1),
          stan::model::index_uni(a));
      }
      current_statement__ = 47;
      for (int t = 2; t <= n_pop_yrs; ++t) {
        current_statement__ = 45;
        for (int a = 2; a <= n_pop_age; ++a) {
          current_statement__ = 43;
          stan::model::assign(mc_prev,
            (stan::model::rvalue(mc_prev, "mc_prev",
               stan::model::index_uni((t - 1)),
               stan::model::index_uni((a - 1))) + ((1.0 -
            stan::model::rvalue(mc_prev, "mc_prev",
              stan::model::index_uni((t - 1)),
              stan::model::index_uni((a - 1)))) *
            stan::model::rvalue(uptake_prop, "uptake_prop",
              stan::model::index_uni(t), stan::model::index_uni(a)))),
            "assigning variable mc_prev", stan::model::index_uni(t),
            stan::model::index_uni(a));
        }
      }
      current_statement__ = 56;
      for (int k = 1; k <= n_svy_obs; ++k) {
        current_statement__ = 48;
        numer = 0.0;
        current_statement__ = 49;
        denom = 0.0;
        current_statement__ = 53;
        for (int a =
               stan::model::rvalue(svy_age_min, "svy_age_min",
                 stan::model::index_uni(k)); a <=
             stan::model::rvalue(svy_age_max, "svy_age_max",
               stan::model::index_uni(k)); ++a) {
          current_statement__ = 50;
          numer = (numer +
            (stan::model::rvalue(pop_sum, "pop_sum",
               stan::model::index_uni(
                 ((stan::model::rvalue(svy_year, "svy_year",
                     stan::model::index_uni(k)) - 1970) + 1)),
               stan::model::index_uni((a + 1)))
            *
            stan::model::rvalue(mc_prev, "mc_prev",
              stan::model::index_uni(
                ((stan::model::rvalue(svy_year, "svy_year",
                    stan::model::index_uni(k)) - 1970) + 1)),
              stan::model::index_uni((a + 1)))));
          current_statement__ = 51;
          denom = (denom +
            stan::model::rvalue(pop_sum, "pop_sum",
              stan::model::index_uni(
                ((stan::model::rvalue(svy_year, "svy_year",
                    stan::model::index_uni(k)) - 1970) + 1)),
              stan::model::index_uni((a + 1))));
        }
        current_statement__ = 54;
        stan::model::assign(svy_mc_prev, (numer / denom),
          "assigning variable svy_mc_prev", stan::model::index_uni(k));
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "rate1", rate1, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "rate2", rate2, 0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "dist1", dist1, 0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "dist2", dist2, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "uptake_prop",
        uptake_prop, 0);
      current_statement__ = 17;
      stan::math::check_less_or_equal(function__, "uptake_prop", uptake_prop,
        1);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "mc_prev", mc_prev, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "mc_prev", mc_prev, 1);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "svy_mc_prev",
        svy_mc_prev, 0);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "svy_mc_prev", svy_mc_prev,
        1);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "numer", numer, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "denom", denom, 0);
      {
        current_statement__ = 57;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(r1_slope1, 0.5));
        current_statement__ = 58;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(r1_slope2, 0.5));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(r1_center, (2012 -
                         1970), 4.0));
        current_statement__ = 60;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(r1_theta1, 2.0));
        current_statement__ = 61;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(r1_theta2, 0.5));
        current_statement__ = 62;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(a1_size, 0.1));
        current_statement__ = 63;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(a1_mean, 0, 50));
        current_statement__ = 64;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(r2_rate, 8.0));
        current_statement__ = 65;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(a2_size, 0.1));
        current_statement__ = 66;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(a2_mean, 0, 50));
        current_statement__ = 69;
        for (int k = 1; k <= n_svy_obs; ++k) {
          current_statement__ = 67;
          lp_accum__.add(((stan::model::rvalue(svy_n_mc, "svy_n_mc",
                             stan::model::index_uni(k)) *
            stan::math::log(
              stan::model::rvalue(svy_mc_prev, "svy_mc_prev",
                stan::model::index_uni(k)))) +
            (stan::model::rvalue(svy_n_no, "svy_n_no",
               stan::model::index_uni(k)) *
            stan::math::log((1.0 -
              stan::model::rvalue(svy_mc_prev, "svy_mc_prev",
                stan::model::index_uni(k)))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mcmodel_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double r1_slope1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      r1_slope1 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double r1_slope2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      r1_slope2 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double r1_center = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      r1_center = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double r1_theta1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      r1_theta1 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double r1_theta2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      r1_theta2 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double a1_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      a1_size = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double a1_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      a1_mean = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 50, lp__);
      double r2_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      r2_rate = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double a2_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      a2_size = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double a2_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      a2_mean = in__.template read_constrain_lub<local_scalar_t__,
                  jacobian__>(0, 50, lp__);
      double z1 = std::numeric_limits<double>::quiet_NaN();
      double z2 = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> rate1 =
        std::vector<double>(n_pop_yrs,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> rate2 =
        std::vector<double>(n_pop_yrs,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> dist1 =
        std::vector<double>(n_pop_age,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> dist2 =
        std::vector<double>(n_pop_age,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<double>> uptake_prop =
        std::vector<std::vector<double>>(n_pop_yrs,
          std::vector<double>(n_pop_age,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> mc_prev =
        std::vector<std::vector<double>>(n_pop_yrs,
          std::vector<double>(n_pop_age,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> svy_mc_prev =
        std::vector<double>(n_svy_obs,
          std::numeric_limits<double>::quiet_NaN());
      double numer = std::numeric_limits<double>::quiet_NaN();
      double denom = std::numeric_limits<double>::quiet_NaN();
      out__.write(r1_slope1);
      out__.write(r1_slope2);
      out__.write(r1_center);
      out__.write(r1_theta1);
      out__.write(r1_theta2);
      out__.write(a1_size);
      out__.write(a1_mean);
      out__.write(r2_rate);
      out__.write(a2_size);
      out__.write(a2_mean);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 27;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 22;
        z1 = (1.0 / (1.0 +
          stan::math::exp((-r1_slope1 *
            ((stan::model::rvalue(pop_year, "pop_year",
                stan::model::index_uni(t)) - 1970) - r1_center)))));
        current_statement__ = 23;
        z2 = (1.0 / (1.0 +
          stan::math::exp((r1_slope2 *
            ((stan::model::rvalue(pop_year, "pop_year",
                stan::model::index_uni(t)) - 1970) - r1_center)))));
        current_statement__ = 24;
        stan::model::assign(rate1, (z1 * (((2 * r1_theta1) * z2) +
          r1_theta2)), "assigning variable rate1", stan::model::index_uni(t));
        current_statement__ = 25;
        stan::model::assign(rate2, r2_rate, "assigning variable rate2",
          stan::model::index_uni(t));
      }
      current_statement__ = 31;
      for (int a = 1; a <= n_pop_age; ++a) {
        current_statement__ = 28;
        stan::model::assign(dist1,
          stan::math::exp(
            stan::math::neg_binomial_2_lpmf<false>((a - 1), a1_mean, a1_size)),
          "assigning variable dist1", stan::model::index_uni(a));
        current_statement__ = 29;
        stan::model::assign(dist2,
          stan::math::exp(
            stan::math::neg_binomial_2_lpmf<false>((a - 1), a2_mean, a2_size)),
          "assigning variable dist2", stan::model::index_uni(a));
      }
      current_statement__ = 36;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 34;
        for (int a = 1; a <= n_pop_age; ++a) {
          current_statement__ = 32;
          stan::model::assign(uptake_prop, (1.0 -
            stan::math::exp(
              ((-stan::model::rvalue(rate1, "rate1",
                   stan::model::index_uni(t)) *
              stan::model::rvalue(dist1, "dist1", stan::model::index_uni(a)))
              -
              (stan::model::rvalue(rate2, "rate2", stan::model::index_uni(t))
              *
              stan::model::rvalue(dist2, "dist2", stan::model::index_uni(a)))))),
            "assigning variable uptake_prop", stan::model::index_uni(t),
            stan::model::index_uni(a));
        }
      }
      current_statement__ = 39;
      for (int t = 1; t <= n_pop_yrs; ++t) {
        current_statement__ = 37;
        stan::model::assign(mc_prev,
          stan::model::rvalue(uptake_prop, "uptake_prop",
            stan::model::index_uni(t), stan::model::index_uni(1)),
          "assigning variable mc_prev", stan::model::index_uni(t),
          stan::model::index_uni(1));
      }
      current_statement__ = 42;
      for (int a = 2; a <= n_pop_age; ++a) {
        current_statement__ = 40;
        stan::model::assign(mc_prev,
          (stan::model::rvalue(mc_prev, "mc_prev", stan::model::index_uni(1),
             stan::model::index_uni((a - 1))) + ((1.0 -
          stan::model::rvalue(mc_prev, "mc_prev", stan::model::index_uni(1),
            stan::model::index_uni((a - 1)))) *
          stan::model::rvalue(uptake_prop, "uptake_prop",
            stan::model::index_uni(1), stan::model::index_uni(a)))),
          "assigning variable mc_prev", stan::model::index_uni(1),
          stan::model::index_uni(a));
      }
      current_statement__ = 47;
      for (int t = 2; t <= n_pop_yrs; ++t) {
        current_statement__ = 45;
        for (int a = 2; a <= n_pop_age; ++a) {
          current_statement__ = 43;
          stan::model::assign(mc_prev,
            (stan::model::rvalue(mc_prev, "mc_prev",
               stan::model::index_uni((t - 1)),
               stan::model::index_uni((a - 1))) + ((1.0 -
            stan::model::rvalue(mc_prev, "mc_prev",
              stan::model::index_uni((t - 1)),
              stan::model::index_uni((a - 1)))) *
            stan::model::rvalue(uptake_prop, "uptake_prop",
              stan::model::index_uni(t), stan::model::index_uni(a)))),
            "assigning variable mc_prev", stan::model::index_uni(t),
            stan::model::index_uni(a));
        }
      }
      current_statement__ = 56;
      for (int k = 1; k <= n_svy_obs; ++k) {
        current_statement__ = 48;
        numer = 0.0;
        current_statement__ = 49;
        denom = 0.0;
        current_statement__ = 53;
        for (int a =
               stan::model::rvalue(svy_age_min, "svy_age_min",
                 stan::model::index_uni(k)); a <=
             stan::model::rvalue(svy_age_max, "svy_age_max",
               stan::model::index_uni(k)); ++a) {
          current_statement__ = 50;
          numer = (numer +
            (stan::model::rvalue(pop_sum, "pop_sum",
               stan::model::index_uni(
                 ((stan::model::rvalue(svy_year, "svy_year",
                     stan::model::index_uni(k)) - 1970) + 1)),
               stan::model::index_uni((a + 1)))
            *
            stan::model::rvalue(mc_prev, "mc_prev",
              stan::model::index_uni(
                ((stan::model::rvalue(svy_year, "svy_year",
                    stan::model::index_uni(k)) - 1970) + 1)),
              stan::model::index_uni((a + 1)))));
          current_statement__ = 51;
          denom = (denom +
            stan::model::rvalue(pop_sum, "pop_sum",
              stan::model::index_uni(
                ((stan::model::rvalue(svy_year, "svy_year",
                    stan::model::index_uni(k)) - 1970) + 1)),
              stan::model::index_uni((a + 1))));
        }
        current_statement__ = 54;
        stan::model::assign(svy_mc_prev, (numer / denom),
          "assigning variable svy_mc_prev", stan::model::index_uni(k));
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "rate1", rate1, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "rate2", rate2, 0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "dist1", dist1, 0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "dist2", dist2, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "uptake_prop",
        uptake_prop, 0);
      current_statement__ = 17;
      stan::math::check_less_or_equal(function__, "uptake_prop", uptake_prop,
        1);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "mc_prev", mc_prev, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "mc_prev", mc_prev, 1);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "svy_mc_prev",
        svy_mc_prev, 0);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "svy_mc_prev", svy_mc_prev,
        1);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "numer", numer, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "denom", denom, 0);
      if (emit_transformed_parameters__) {
        out__.write(z1);
        out__.write(z2);
        out__.write(rate1);
        out__.write(rate2);
        out__.write(dist1);
        out__.write(dist2);
        for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
            out__.write(uptake_prop[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
            out__.write(mc_prev[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(svy_mc_prev);
        out__.write(numer);
        out__.write(denom);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ r1_slope1 = DUMMY_VAR__;
      current_statement__ = 1;
      r1_slope1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r1_slope1);
      local_scalar_t__ r1_slope2 = DUMMY_VAR__;
      current_statement__ = 2;
      r1_slope2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r1_slope2);
      local_scalar_t__ r1_center = DUMMY_VAR__;
      current_statement__ = 3;
      r1_center = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r1_center);
      local_scalar_t__ r1_theta1 = DUMMY_VAR__;
      current_statement__ = 4;
      r1_theta1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r1_theta1);
      local_scalar_t__ r1_theta2 = DUMMY_VAR__;
      current_statement__ = 5;
      r1_theta2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r1_theta2);
      local_scalar_t__ a1_size = DUMMY_VAR__;
      current_statement__ = 6;
      a1_size = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, a1_size);
      local_scalar_t__ a1_mean = DUMMY_VAR__;
      current_statement__ = 7;
      a1_mean = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 50, a1_mean);
      local_scalar_t__ r2_rate = DUMMY_VAR__;
      current_statement__ = 8;
      r2_rate = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r2_rate);
      local_scalar_t__ a2_size = DUMMY_VAR__;
      current_statement__ = 9;
      a2_size = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, a2_size);
      local_scalar_t__ a2_mean = DUMMY_VAR__;
      current_statement__ = 10;
      a2_mean = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 50, a2_mean);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "r1_slope1",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "r1_slope2",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "r1_center",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "r1_theta1",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "r1_theta2",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "a1_size",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "a1_mean",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "r2_rate",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "a2_size",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "a2_mean",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ r1_slope1 = DUMMY_VAR__;
      current_statement__ = 1;
      r1_slope1 = context__.vals_r("r1_slope1")[(1 - 1)];
      out__.write_free_lb(0, r1_slope1);
      local_scalar_t__ r1_slope2 = DUMMY_VAR__;
      current_statement__ = 2;
      r1_slope2 = context__.vals_r("r1_slope2")[(1 - 1)];
      out__.write_free_lb(0, r1_slope2);
      local_scalar_t__ r1_center = DUMMY_VAR__;
      current_statement__ = 3;
      r1_center = context__.vals_r("r1_center")[(1 - 1)];
      out__.write_free_lb(0, r1_center);
      local_scalar_t__ r1_theta1 = DUMMY_VAR__;
      current_statement__ = 4;
      r1_theta1 = context__.vals_r("r1_theta1")[(1 - 1)];
      out__.write_free_lb(0, r1_theta1);
      local_scalar_t__ r1_theta2 = DUMMY_VAR__;
      current_statement__ = 5;
      r1_theta2 = context__.vals_r("r1_theta2")[(1 - 1)];
      out__.write_free_lb(0, r1_theta2);
      local_scalar_t__ a1_size = DUMMY_VAR__;
      current_statement__ = 6;
      a1_size = context__.vals_r("a1_size")[(1 - 1)];
      out__.write_free_lb(0, a1_size);
      local_scalar_t__ a1_mean = DUMMY_VAR__;
      current_statement__ = 7;
      a1_mean = context__.vals_r("a1_mean")[(1 - 1)];
      out__.write_free_lub(0, 50, a1_mean);
      local_scalar_t__ r2_rate = DUMMY_VAR__;
      current_statement__ = 8;
      r2_rate = context__.vals_r("r2_rate")[(1 - 1)];
      out__.write_free_lb(0, r2_rate);
      local_scalar_t__ a2_size = DUMMY_VAR__;
      current_statement__ = 9;
      a2_size = context__.vals_r("a2_size")[(1 - 1)];
      out__.write_free_lb(0, a2_size);
      local_scalar_t__ a2_mean = DUMMY_VAR__;
      current_statement__ = 10;
      a2_mean = context__.vals_r("a2_mean")[(1 - 1)];
      out__.write_free_lub(0, 50, a2_mean);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"r1_slope1", "r1_slope2", "r1_center",
                "r1_theta1", "r1_theta2", "a1_size", "a1_mean", "r2_rate",
                "a2_size", "a2_mean"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"z1", "z2", "rate1", "rate2", "dist1", "dist2", "uptake_prop",
             "mc_prev", "svy_mc_prev", "numer", "denom"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n_pop_yrs)},
             std::vector<size_t>{static_cast<size_t>(n_pop_yrs)},
             std::vector<size_t>{static_cast<size_t>(n_pop_age)},
             std::vector<size_t>{static_cast<size_t>(n_pop_age)},
             std::vector<size_t>{static_cast<size_t>(n_pop_yrs),
               static_cast<size_t>(n_pop_age)},
             std::vector<size_t>{static_cast<size_t>(n_pop_yrs),
               static_cast<size_t>(n_pop_age)},
             std::vector<size_t>{static_cast<size_t>(n_svy_obs)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "r1_slope1");
    param_names__.emplace_back(std::string() + "r1_slope2");
    param_names__.emplace_back(std::string() + "r1_center");
    param_names__.emplace_back(std::string() + "r1_theta1");
    param_names__.emplace_back(std::string() + "r1_theta2");
    param_names__.emplace_back(std::string() + "a1_size");
    param_names__.emplace_back(std::string() + "a1_mean");
    param_names__.emplace_back(std::string() + "r2_rate");
    param_names__.emplace_back(std::string() + "a2_size");
    param_names__.emplace_back(std::string() + "a2_mean");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z2");
      for (int sym1__ = 1; sym1__ <= n_pop_yrs; ++sym1__) {
        param_names__.emplace_back(std::string() + "rate1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_yrs; ++sym1__) {
        param_names__.emplace_back(std::string() + "rate2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
          param_names__.emplace_back(std::string() + "uptake_prop" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
          param_names__.emplace_back(std::string() + "mc_prev" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_svy_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "svy_mc_prev" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "numer");
      param_names__.emplace_back(std::string() + "denom");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "r1_slope1");
    param_names__.emplace_back(std::string() + "r1_slope2");
    param_names__.emplace_back(std::string() + "r1_center");
    param_names__.emplace_back(std::string() + "r1_theta1");
    param_names__.emplace_back(std::string() + "r1_theta2");
    param_names__.emplace_back(std::string() + "a1_size");
    param_names__.emplace_back(std::string() + "a1_mean");
    param_names__.emplace_back(std::string() + "r2_rate");
    param_names__.emplace_back(std::string() + "a2_size");
    param_names__.emplace_back(std::string() + "a2_mean");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z2");
      for (int sym1__ = 1; sym1__ <= n_pop_yrs; ++sym1__) {
        param_names__.emplace_back(std::string() + "rate1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_yrs; ++sym1__) {
        param_names__.emplace_back(std::string() + "rate2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
          param_names__.emplace_back(std::string() + "uptake_prop" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pop_age; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pop_yrs; ++sym2__) {
          param_names__.emplace_back(std::string() + "mc_prev" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_svy_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "svy_mc_prev" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "numer");
      param_names__.emplace_back(std::string() + "denom");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"r1_slope1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_slope2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_center\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_theta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_theta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r2_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rate1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"rate2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"dist1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"dist2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"uptake_prop\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"mc_prev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"svy_mc_prev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_svy_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"numer\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"denom\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"r1_slope1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_slope2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_center\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_theta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r1_theta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r2_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rate1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"rate2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"dist1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"dist2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"uptake_prop\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"mc_prev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_yrs) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_pop_age) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"svy_mc_prev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_svy_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"numer\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"denom\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + 1) + n_pop_yrs) + n_pop_yrs) + n_pop_age) + n_pop_age) + (n_pop_yrs *
      n_pop_age)) + (n_pop_yrs * n_pop_age)) + n_svy_obs) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + 1) + n_pop_yrs) + n_pop_yrs) + n_pop_age) + n_pop_age) + (n_pop_yrs *
      n_pop_age)) + (n_pop_yrs * n_pop_age)) + n_svy_obs) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mcmodel_namespace::model_mcmodel;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mcmodel_namespace::profiles__;
}
#endif
#endif
